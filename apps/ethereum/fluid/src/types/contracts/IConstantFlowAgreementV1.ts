/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IConstantFlowAgreementV1Interface extends utils.Interface {
  contractName: "IConstantFlowAgreementV1";
  functions: {
    "agreementType()": FunctionFragment;
    "createFlow(address,address,int96,bytes)": FunctionFragment;
    "deleteFlow(address,address,address,bytes)": FunctionFragment;
    "getAccountFlowInfo(address,address)": FunctionFragment;
    "getDepositRequiredForFlowRate(address,int96)": FunctionFragment;
    "getFlow(address,address,address)": FunctionFragment;
    "getFlowByID(address,bytes32)": FunctionFragment;
    "getMaximumFlowRateFromDeposit(address,uint256)": FunctionFragment;
    "getNetFlow(address,address)": FunctionFragment;
    "isPatricianPeriod(address,address,uint256)": FunctionFragment;
    "isPatricianPeriodNow(address,address)": FunctionFragment;
    "realtimeBalanceOf(address,address,uint256)": FunctionFragment;
    "updateFlow(address,address,int96,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "agreementType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createFlow",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteFlow",
    values: [string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountFlowInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositRequiredForFlowRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlow",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlowByID",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumFlowRateFromDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNetFlow",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPatricianPeriod",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPatricianPeriodNow",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "realtimeBalanceOf",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlow",
    values: [string, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "agreementType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createFlow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountFlowInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositRequiredForFlowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFlowByID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumFlowRateFromDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNetFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPatricianPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPatricianPeriodNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realtimeBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFlow", data: BytesLike): Result;

  events: {
    "FlowUpdated(address,address,address,int96,int256,int256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FlowUpdated"): EventFragment;
}

export type FlowUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, string],
  {
    token: string;
    sender: string;
    receiver: string;
    flowRate: BigNumber;
    totalSenderFlowRate: BigNumber;
    totalReceiverFlowRate: BigNumber;
    userData: string;
  }
>;

export type FlowUpdatedEventFilter = TypedEventFilter<FlowUpdatedEvent>;

export interface IConstantFlowAgreementV1 extends BaseContract {
  contractName: "IConstantFlowAgreementV1";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IConstantFlowAgreementV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    agreementType(overrides?: CallOverrides): Promise<[string]>;

    createFlow(
      token: string,
      receiver: string,
      flowRate: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteFlow(
      token: string,
      sender: string,
      receiver: string,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountFlowInfo(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        flowRate: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    getDepositRequiredForFlowRate(
      token: string,
      flowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { deposit: BigNumber }>;

    getFlow(
      token: string,
      sender: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        flowRate: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    getFlowByID(
      token: string,
      agreementId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        flowRate: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    getMaximumFlowRateFromDeposit(
      token: string,
      deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { flowRate: BigNumber }>;

    getNetFlow(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { flowRate: BigNumber }>;

    isPatricianPeriod(
      token: string,
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isPatricianPeriod: boolean }>;

    isPatricianPeriodNow(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        isPatricianPeriod: boolean;
        timestamp: BigNumber;
      }
    >;

    realtimeBalanceOf(
      token: string,
      account: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dynamicBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    updateFlow(
      token: string,
      receiver: string,
      flowRate: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  agreementType(overrides?: CallOverrides): Promise<string>;

  createFlow(
    token: string,
    receiver: string,
    flowRate: BigNumberish,
    ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteFlow(
    token: string,
    sender: string,
    receiver: string,
    ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountFlowInfo(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      timestamp: BigNumber;
      flowRate: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
    }
  >;

  getDepositRequiredForFlowRate(
    token: string,
    flowRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFlow(
    token: string,
    sender: string,
    receiver: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      timestamp: BigNumber;
      flowRate: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
    }
  >;

  getFlowByID(
    token: string,
    agreementId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      timestamp: BigNumber;
      flowRate: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
    }
  >;

  getMaximumFlowRateFromDeposit(
    token: string,
    deposit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNetFlow(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isPatricianPeriod(
    token: string,
    account: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPatricianPeriodNow(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { isPatricianPeriod: boolean; timestamp: BigNumber }
  >;

  realtimeBalanceOf(
    token: string,
    account: string,
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      dynamicBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
    }
  >;

  updateFlow(
    token: string,
    receiver: string,
    flowRate: BigNumberish,
    ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    agreementType(overrides?: CallOverrides): Promise<string>;

    createFlow(
      token: string,
      receiver: string,
      flowRate: BigNumberish,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    deleteFlow(
      token: string,
      sender: string,
      receiver: string,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getAccountFlowInfo(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        flowRate: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    getDepositRequiredForFlowRate(
      token: string,
      flowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFlow(
      token: string,
      sender: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        flowRate: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    getFlowByID(
      token: string,
      agreementId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        flowRate: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    getMaximumFlowRateFromDeposit(
      token: string,
      deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetFlow(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPatricianPeriod(
      token: string,
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPatricianPeriodNow(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        isPatricianPeriod: boolean;
        timestamp: BigNumber;
      }
    >;

    realtimeBalanceOf(
      token: string,
      account: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dynamicBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    updateFlow(
      token: string,
      receiver: string,
      flowRate: BigNumberish,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "FlowUpdated(address,address,address,int96,int256,int256,bytes)"(
      token?: string | null,
      sender?: string | null,
      receiver?: string | null,
      flowRate?: null,
      totalSenderFlowRate?: null,
      totalReceiverFlowRate?: null,
      userData?: null
    ): FlowUpdatedEventFilter;
    FlowUpdated(
      token?: string | null,
      sender?: string | null,
      receiver?: string | null,
      flowRate?: null,
      totalSenderFlowRate?: null,
      totalReceiverFlowRate?: null,
      userData?: null
    ): FlowUpdatedEventFilter;
  };

  estimateGas: {
    agreementType(overrides?: CallOverrides): Promise<BigNumber>;

    createFlow(
      token: string,
      receiver: string,
      flowRate: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteFlow(
      token: string,
      sender: string,
      receiver: string,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountFlowInfo(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositRequiredForFlowRate(
      token: string,
      flowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFlow(
      token: string,
      sender: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFlowByID(
      token: string,
      agreementId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaximumFlowRateFromDeposit(
      token: string,
      deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetFlow(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPatricianPeriod(
      token: string,
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPatricianPeriodNow(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    realtimeBalanceOf(
      token: string,
      account: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateFlow(
      token: string,
      receiver: string,
      flowRate: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    agreementType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createFlow(
      token: string,
      receiver: string,
      flowRate: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteFlow(
      token: string,
      sender: string,
      receiver: string,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountFlowInfo(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositRequiredForFlowRate(
      token: string,
      flowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFlow(
      token: string,
      sender: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFlowByID(
      token: string,
      agreementId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaximumFlowRateFromDeposit(
      token: string,
      deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetFlow(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPatricianPeriod(
      token: string,
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPatricianPeriodNow(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    realtimeBalanceOf(
      token: string,
      account: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateFlow(
      token: string,
      receiver: string,
      flowRate: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
